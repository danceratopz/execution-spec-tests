[tox]
# Get a description of all available environments with `uvx --with=tox-uv tox -av`
env_list =
    lint
    typecheck
    markdownlint
    spellcheck
    pytest
    tests-deployed
    tests-deployed-zkevm
    mkdocs

[testenv]
runner = uv-venv-lock-runner
package = editable
wheel_build_env = .pkg
python_source_dirs = src tests .github/scripts

[testenv:lint]
description = Lint and code formatting checks (ruff)
extras = lint
commands =
    ruff check --no-fix --show-fixes {[testenv]python_source_dirs}
    ruff format --check {[testenv]python_source_dirs} # use check instead of diff to avoid red print of 'x files already formatted'

[testenv:typecheck]
description = Run type checking (mypy)
extras = lint
commands = mypy {[testenv]python_source_dirs}

[testenv:spellcheck]
description = Spellcheck code and documentation (codespell)
extras = docs
passenv =
    GITHUB_ACTIONS
    GITHUB_STEP_SUMMARY
commands = python -c "import src.cli.tox_helpers; src.cli.tox_helpers.codespell()"


[testenv:markdownlint]
description = Lint markdown files (markdownlint)
extras = docs
commands = python -c "import src.cli.tox_helpers; src.cli.tox_helpers.markdownlint()"

[testenv:changelog]
description = Validate changelog entries (changelog)
extras = docs
commands = python -c "import src.cli.tox_helpers; src.cli.tox_helpers.validate_changelog()"

[testenv:mkdocs]
description = Build documentation in strict mode (mkdocs)
extras = docs,lint
setenv =
    GEN_TEST_DOC_VERSION = "tox"
    # Required for `cairosvg` so tox can find `libcairo-2`.
    # https://squidfunk.github.io/mkdocs-material/plugins/requirements/image-processing/?h=cairo#cairo-library-was-not-found
    DYLD_FALLBACK_LIBRARY_PATH = /opt/homebrew/lib
commands = 
    ruff check --no-fix --show-fixes docs/scripts
    ruff format --diff docs/scripts
    mkdocs build --strict

[testenv:pytest]
description = Run library and framework unit tests (pytest)
setenv =
    # Use custom EELS_RESOLUTIONS_FILE if it is set via the environment (eg, in CI)
    EELS_RESOLUTIONS_FILE = {env:EELS_RESOLUTIONS_FILE:}
    CI = {env:CI:}
    # Add the solc binary directory to PATH
    PATH = {envdir}/bin{:}{env:PATH}
extras = 
    test
    lint # Required `gentest` for formatting tests
allowlist_externals =
    sh
    bash
    mkdir
    curl
    chmod
    test
    solc
    grep
commands_pre =
    # Create bin directory
    mkdir -p {envdir}/bin
    # if solc 0.8.24 exists already we are done, otherwise download it and verify version equals 0.8.24 (will fail on linux-arm64) 
    sh -c 'echo "Checking for system solc..."; \
        if command -v solc >/dev/null 2>&1; then \
            SYSTEM_SOLC=$(command -v solc); \
            echo "Found solc at $SYSTEM_SOLC"; \
            VERSION_OUTPUT=$("$SYSTEM_SOLC" --version 2>&1); \
            echo "Found solc version:"; \
            echo "$VERSION_OUTPUT"; \
            if echo "$VERSION_OUTPUT" | grep -q "Version: 0\.8\.24"; then \
                echo "System solc is correct version, copying to tox env..."; \
                mkdir -p {envdir}/bin; \
                cp "$SYSTEM_SOLC" {envdir}/bin/solc; \
                exit 0; \
            else \
                echo "This is not the correct version, expected 0.8.24."; \
            fi; \
        fi; \
        for dir in "{envdir}/bin" "{envdir}/local/bin"; do \
            if [ -x "$dir/solc" ]; then \
                echo "Found solc at $dir/solc"; \
                VERSION_OUTPUT=$("$dir/solc" --version 2>&1); \
                echo "Found solc version:"; \
                echo "$VERSION_OUTPUT"; \
                if echo "$VERSION_OUTPUT" | grep -q "Version: 0\.8\.24"; then \
                    exit 0; \
                else \
                    echo "This is not the correct version, expected 0.8.24."; \
                fi; \
            fi; \
        done; \
        echo "Downloading solc 0.8.24..."; \
        mkdir -p {envdir}/bin; \
        if [ "$(uname)" = "Darwin" ]; then \
            curl -L -o {envdir}/bin/solc https://github.com/ethereum/solidity/releases/download/v0.8.24/solc-macos; \
        else \
            curl -L -o {envdir}/bin/solc https://github.com/ethereum/solidity/releases/download/v0.8.24/solc-static-linux; \
        fi; \
        chmod +x {envdir}/bin/solc; \
        echo "Downloaded solc to {envdir}/bin/solc"; \
        echo "Verifying installation..."; \
        {envdir}/bin/solc --version'
        
commands =
    pytest -c ./pytest-framework.ini -n auto -m "not run_in_serial"
    pytest -c ./pytest-framework.ini -m run_in_serial


[forks]
develop = Prague
eip7692 = EOFv1

[testenv:tests-deployed]
description = Fill test cases in ./tests/ for deployed mainnet forks, except for slow/zkevm.
setenv =
    # Use custom EELS_RESOLUTIONS_FILE if it is set via the environment (eg, in CI)
    EELS_RESOLUTIONS_FILE = {env:EELS_RESOLUTIONS_FILE:}
commands = pytest -n auto -m "not slow and not zkevm" --skip-evm-dump --output=/tmp/fixtures-tox --clean

[testenv:tests-deployed-zkevm]
description = Fill zkEVM test cases in ./tests/ for deployed mainnet forks, using evmone-t8n.
commands = pytest -n auto -m "zkevm" --skip-evm-dump --block-gas-limit 36000000 --output=/tmp/fixtures-tox --clean --evm-bin=evmone-t8n

[testenv:tests-develop]
description = Fill test cases in ./tests/ for deployed and development mainnet forks
setenv =
    # Use custom EELS_RESOLUTIONS_FILE if it is set via the environment (eg, in CI)
    EELS_RESOLUTIONS_FILE = {env:EELS_RESOLUTIONS_FILE:}
commands = pytest -n auto --until={[forks]develop} -k "not slow and not zkevm" --skip-evm-dump --output=/tmp/fixtures-tox --clean

# ----------------------------------------------------------------------------------------------
# ALIAS ENVIRONMENTS
# ----------------------------------------------------------------------------------------------
# For convenience/backwards compatibility. Using -e with a list of environments is preferred due
# to clearer output and better parallelization, e.g.
# uvx --with=tox-uv tox -e lint,typecheck,spellcheck,pytest
# ----------------------------------------------------------------------------------------------

# ALIAS that runs checks on ./src/: lint, typecheck, spellcheck, pytest
# uvx --with=tox-uv tox -e lint,typecheck,spellcheck,pytest
[testenv:framework]
description = Alias that runs lint, typecheck, spellcheck, pytest.
extras =
    {[testenv:lint]extras}
    {[testenv:typecheck]extras}
    {[testenv:spellcheck]extras}
    {[testenv:pytest]extras}
setenv = 
    {[testenv:pytest]setenv}
commands_pre = 
    {[testenv:pytest]:commands_pre}
commands =
    {[testenv:lint]commands}
    {[testenv:typecheck]commands}
    {[testenv:spellcheck]commands}
    {[testenv:pytest]commands}

# ALIAS that runs checks on ./tests/: lint, typecheck, spellcheck, tests-deployed
# uvx --with=tox-uv tox -e lint,typecheck,spellcheck,tests-deployed
[testenv:tests]
description = Alias that runs lint, typecheck, spellcheck, tests-deployed
extras =
    {[testenv:lint]extras}
    {[testenv:typecheck]extras}
    {[testenv:spellcheck]extras}
    {[testenv:tests-deployed]extras}
    {[testenv:tests-deployed-zkevm]extras}
setenv = 
    {[testenv:pytest]setenv}
commands_pre = 
    {[testenv:tests-deployed]:commands_pre}    
    {[testenv:tests-deployed-zkevm]:commands_pre}
commands =
    {[testenv:lint]commands}
    {[testenv:typecheck]commands}
    {[testenv:spellcheck]commands}
    {[testenv:tests-deployed]commands}
    {[testenv:tests-deployed-zkevm]commands}

# ALIAS that runs checks on ./docs/: spellcheck, markdownlint, mkdocs
# uvx --with=tox-uv tox -e spellcheck,markdownlint,mkdocs
[testenv:docs]
description = Alias that runs all documentation checks (spellcheck, markdownlint, mkdocs).
extras =
    {[testenv:spellcheck]extras}
    {[testenv:markdownlint]extras}
    {[testenv:mkdocs]extras}
setenv =
    {[testenv:mkdocs]setenv}
commands =
    {[testenv:spellcheck]commands}
    {[testenv:markdownlint]commands}
    {[testenv:mkdocs]commands}
